pragma solidity ^0.4.24;

// ----------------------------------------------------------------------------
// Sample token contract  /**การสร้างเหรียญ ตัวอย่างของSample token contract*/ 
//
// Symbol        : {{PLS}}  /**สัญลักษณ์เหรียญ (ให้ตั้งเป็นชื่อย่อ)*/
// Name          : {{PLS Token}}  /**ชื่อเหรียญ (ให้ตั้งชื่อแล้วลงท้ายด้วยToken เพื่อให้แสดงชื่อของเหรียญ)*/
// Total supply  : {{1xxxxxxxxxxxxxx}}  /**จำนวนของเหรียญ*/
// Decimals      : {{4}}  /**จำนวนทศนิยม (นิยมใส่ 4,6,8)*/
// Owner Account : {{0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D}}  /**ลิงค์กระเป๋าเงินใน MetaMask ของเรา*/
//
// Enjoy. /**ให้ตั้งชื่อตัวเอง(เพื่อแสดงความเป็นเจ้าของ)*/
//
// (c) by Juan Cruz Martinez 2020. MIT Licence.  /**โค้ดตัวอย่างคนสร้างโค้ดนี้ขึ้นมา*/
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Lib: Safe Math
// ----------------------------------------------------------------------------
contract SafeMath {   /**21-42 การสร้างเหรียญเพื่อเชื่อมกับเหรียญethereum*/

    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}


/**
ERC Token Standard #20 Interface
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
*/
contract ERC20Interface {
    function totalSupply() public constant returns (uint);  /**จำนวนเหรียญของsupply*/
    function balanceOf(address tokenOwner) public constant returns (uint balance);  /**ส่งให้ใครบ้าง*/
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);   /**ส่งไปที่ไหนบ้าง*/
    function transfer(address to, uint tokens) public returns (bool success);   /**จำนวนเหรียญถูกต้องไหม*/
    function approve(address spender, uint tokens) public returns (bool success);   /**ตรวจสอบว่าเหรียญถูกต้องไหม*/
    function transferFrom(address from, address to, uint tokens) public returns (bool success);   /**ส่งจากaddressไหน*/

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


/**
Contract function to receive approval and execute function in one call
Borrowed from MiniMeToken
*/
contract ApproveAndCallFallBack {   /**รายการการโอนเหรียญ*/
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}

/**
ERC20 Token, with the addition of symbol, name and decimals and assisted token transfers
*/
contract Saon Token is ERC20Interface, SafeMath {   /**สร้างเหรียญ ตรง xxxToken ให้ใส่ชื่อเหรียญของเราที่สร้างในบรรทัดที่7*/
    string public symbol;   /**เหรียญที่สร้าง*/
    string public  name;    /**ชื่อเหรียญที่สร้าง*/
    uint8 public decimals;    /**ทศนิยมของเหรียญที่สร้าง*/
    uint public _totalSupply;   

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;   /**อนุญาตให้สร้างเหรียญ*/


    // ------------------------------------------------------------------------
    // Constructor  /**ขั้นตอนการสร้างเหรียญ*/
    // ------------------------------------------------------------------------
    constructor() public {
        symbol = "PLS";   /**สัญลักษณ์เหรียญ (ให้ตั้งเป็นชื่อย่อ)*/
        name = "PLS Token";   /**ชื่อเหรียญ (ให้ตั้งชื่อแล้วลงท้ายด้วยToken เพื่อให้แสดงชื่อของเหรียญ)*/
        decimals = 4;   /**จำนวนทศนิยม (นิยมใส่ 4,6,8)*/
        _totalSupply = 1xxxxxxxxxxxxxx;   /**จำนวนของเหรียญ*/
        balances[0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D] = _totalSupply;    /**ลิงค์กระเป๋าเงินใน MetaMask ของเรา*/
        emit Transfer(address(0), 0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D, _totalSupply);    /**ลิงค์กระเป๋าเงินใน MetaMask ของเรา*/
    }


    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];    /**ส่งไปบัญชีของเรา*/
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {    /**ตรวจสอบการสร้างเหรียญ*/
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }


    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
}
